"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_Parent_Declarations_ts";
exports.ids = ["components_Parent_Declarations_ts"];
exports.modules = {

/***/ "./components/Parent/Declarations.ts":
/*!*******************************************!*\
  !*** ./components/Parent/Declarations.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runner: () => (/* binding */ Runner)\n/* harmony export */ });\n/* harmony import */ var crypto_js_md5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js/md5 */ \"crypto-js/md5\");\n/* harmony import */ var crypto_js_md5__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js_md5__WEBPACK_IMPORTED_MODULE_0__);\nclass QeHeaders extends Headers {\n    get(key) {\n        return this.headers.find((h)=>h.key == key)?.value;\n    }\n    append(key, value) {\n        this.headers.push({\n            key,\n            value\n        });\n    }\n    delete(key) {\n        this.headers = this.headers.filter((h)=>h.key != key);\n    }\n    forEach(callbackfn, thisArg) {\n        for (let o of this.headers){\n            callbackfn?.(o.value, o.key, null);\n        }\n    }\n    has(key) {\n        return !!this.get(key);\n    }\n    keys() {\n        return this.headers.map((h)=>h.key);\n    }\n    values() {\n        return this.headers.map((h)=>h.value);\n    }\n    set(name, value) {\n        for(let i in this.headers){\n            if (this.headers[i].key == name) {\n                this.headers[i].value = value;\n                return;\n            }\n        }\n        this.append(name, value);\n    }\n    constructor(...args){\n        super(...args);\n        this.headers = [];\n    }\n}\n\nconst Runner = ()=>{\n    global.sss = (arg1, arg2)=>arg2 ? console.log(arg1, arg2) : console.log(arg1);\n    console.log(\"start front-end declaration...\");\n    String.prototype.betweenxy = function(str1, str2, startindex = 0) {\n        const startIndex = this.indexOf(str1, startindex);\n        if (startIndex === -1) return \"\";\n        const endIndex = this.indexOf(str2, startIndex + str1.length);\n        if (endIndex === -1) return \"\";\n        return this.substring(startIndex + str1.length, endIndex);\n    };\n    if (!process?.env?.DOMAIN) {\n        global.MD5 = (input)=>{\n            return crypto_js_md5__WEBPACK_IMPORTED_MODULE_0___default()(input).toString();\n        };\n    }\n    global.Round = (number, digits)=>{\n        if (digits >= 0) {\n            return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);\n        }\n        var factor = Math.pow(10, -digits);\n        var rounded = Math.round(number / factor) * factor;\n        if (digits == -1) {\n            return Math.floor(rounded);\n        } else {\n            return Math.floor(rounded / 10) * 10;\n        }\n    };\n    global.fetchv2 = async (url, options = {})=>{\n        // Set the \"Target-URL\" header to the URL we want to fetch\n        options.headers = options.headers || {};\n        // Add \"zqe-\" prefix to user's headers\n        const zqeHeaders = {};\n        for (const [key, value] of Object.entries(options.headers)){\n            if (key.startsWith(\"zqe-\")) {\n                zqeHeaders[key] = value;\n            } else {\n                zqeHeaders[`zqe-${key}`] = value;\n            }\n        }\n        options.headers = zqeHeaders;\n        options.headers[\"target-url\"] = url;\n        options.headers[\"Access-Control-Allow-Origin\"] = \"*\";\n        options.headers[\"Access-Control-Allow-Headers\"] = \"*\";\n        options.headers[\"Access-Control-Allow-Methods\"] = \"*\";\n        options.headers[\"Access-Control-Expose-Headers\"] = \"*\";\n        const proxyUrl = \"http://127.0.0.1:8888/\";\n        let res = await fetch(proxyUrl, options);\n        let rh = new QeHeaders();\n        let status = -1;\n        res.headers.forEach((v, k)=>{\n            // console.log(k+\":\"+v)\n            if (k.toLowerCase() == \"zstatusz\") {\n                status = parseInt(v);\n            } else {\n                k = k.replace(/-xmlx\\d+/i, \"\");\n                if (k.startsWith(\"zqe-\")) {\n                    let newk = k.substring(4);\n                    rh.append(newk, v);\n                }\n            }\n        });\n        return {\n            ...res,\n            arrayBuffer: async ()=>await res.arrayBuffer(),\n            blob: async ()=>await res.blob(),\n            status: status,\n            statusText: \"\",\n            body: res.body,\n            bodyUsed: res.bodyUsed,\n            // clone: async () => await res.clone(),\n            formData: async ()=>await res.formData(),\n            json: async ()=>await res.json(),\n            ok: res.ok,\n            redirected: res.redirected,\n            text: async ()=>await res.text(),\n            type: res.type,\n            url: res.url,\n            headers: rh\n        };\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Parent/Declarations.ts\n");

/***/ })

};
;